// Generated by gencpp from file planner_msgs/Vertex.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_VERTEX_H
#define PLANNER_MSGS_MESSAGE_VERTEX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace planner_msgs
{
template <class ContainerAllocator>
struct Vertex_
{
  typedef Vertex_<ContainerAllocator> Type;

  Vertex_()
    : id(0)
    , pose()
    , num_unknown_voxels(0)
    , num_occupied_voxels(0)
    , num_free_voxels(0)
    , is_frontier(false)  {
    }
  Vertex_(const ContainerAllocator& _alloc)
    : id(0)
    , pose(_alloc)
    , num_unknown_voxels(0)
    , num_occupied_voxels(0)
    , num_free_voxels(0)
    , is_frontier(false)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef int32_t _num_unknown_voxels_type;
  _num_unknown_voxels_type num_unknown_voxels;

   typedef int32_t _num_occupied_voxels_type;
  _num_occupied_voxels_type num_occupied_voxels;

   typedef int32_t _num_free_voxels_type;
  _num_free_voxels_type num_free_voxels;

   typedef uint8_t _is_frontier_type;
  _is_frontier_type is_frontier;





  typedef boost::shared_ptr< ::planner_msgs::Vertex_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::Vertex_<ContainerAllocator> const> ConstPtr;

}; // struct Vertex_

typedef ::planner_msgs::Vertex_<std::allocator<void> > Vertex;

typedef boost::shared_ptr< ::planner_msgs::Vertex > VertexPtr;
typedef boost::shared_ptr< ::planner_msgs::Vertex const> VertexConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::Vertex_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::Vertex_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::Vertex_<ContainerAllocator1> & lhs, const ::planner_msgs::Vertex_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.pose == rhs.pose &&
    lhs.num_unknown_voxels == rhs.num_unknown_voxels &&
    lhs.num_occupied_voxels == rhs.num_occupied_voxels &&
    lhs.num_free_voxels == rhs.num_free_voxels &&
    lhs.is_frontier == rhs.is_frontier;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::Vertex_<ContainerAllocator1> & lhs, const ::planner_msgs::Vertex_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::Vertex_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::Vertex_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::Vertex_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::Vertex_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::Vertex_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::Vertex_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::Vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "663034a815fe27eaa71d6d6b0f8b9b78";
  }

  static const char* value(const ::planner_msgs::Vertex_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x663034a815fe27eaULL;
  static const uint64_t static_value2 = 0xa71d6d6b0f8b9b78ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::Vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/Vertex";
  }

  static const char* value(const ::planner_msgs::Vertex_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::Vertex_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"geometry_msgs/Pose pose\n"
"\n"
"# For volumetric gain\n"
"int32 num_unknown_voxels\n"
"int32 num_occupied_voxels\n"
"int32 num_free_voxels\n"
"bool is_frontier\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::planner_msgs::Vertex_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::Vertex_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.pose);
      stream.next(m.num_unknown_voxels);
      stream.next(m.num_occupied_voxels);
      stream.next(m.num_free_voxels);
      stream.next(m.is_frontier);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Vertex_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::Vertex_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::Vertex_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "num_unknown_voxels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_unknown_voxels);
    s << indent << "num_occupied_voxels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_occupied_voxels);
    s << indent << "num_free_voxels: ";
    Printer<int32_t>::stream(s, indent + "  ", v.num_free_voxels);
    s << indent << "is_frontier: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_frontier);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_VERTEX_H

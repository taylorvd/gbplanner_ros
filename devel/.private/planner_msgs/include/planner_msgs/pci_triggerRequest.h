// Generated by gencpp from file planner_msgs/pci_triggerRequest.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PCI_TRIGGERREQUEST_H
#define PLANNER_MSGS_MESSAGE_PCI_TRIGGERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct pci_triggerRequest_
{
  typedef pci_triggerRequest_<ContainerAllocator> Type;

  pci_triggerRequest_()
    : not_exe_path(false)
    , set_auto(false)
    , bound_mode(0)
    , vel_max(0.0)  {
    }
  pci_triggerRequest_(const ContainerAllocator& _alloc)
    : not_exe_path(false)
    , set_auto(false)
    , bound_mode(0)
    , vel_max(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _not_exe_path_type;
  _not_exe_path_type not_exe_path;

   typedef uint8_t _set_auto_type;
  _set_auto_type set_auto;

   typedef uint8_t _bound_mode_type;
  _bound_mode_type bound_mode;

   typedef float _vel_max_type;
  _vel_max_type vel_max;





  typedef boost::shared_ptr< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pci_triggerRequest_

typedef ::planner_msgs::pci_triggerRequest_<std::allocator<void> > pci_triggerRequest;

typedef boost::shared_ptr< ::planner_msgs::pci_triggerRequest > pci_triggerRequestPtr;
typedef boost::shared_ptr< ::planner_msgs::pci_triggerRequest const> pci_triggerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::pci_triggerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::pci_triggerRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::pci_triggerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.not_exe_path == rhs.not_exe_path &&
    lhs.set_auto == rhs.set_auto &&
    lhs.bound_mode == rhs.bound_mode &&
    lhs.vel_max == rhs.vel_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::pci_triggerRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::pci_triggerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d722fc81686e1eabf7ead6520efbd4d5";
  }

  static const char* value(const ::planner_msgs::pci_triggerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd722fc81686e1eabULL;
  static const uint64_t static_value2 = 0xf7ead6520efbd4d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/pci_triggerRequest";
  }

  static const char* value(const ::planner_msgs::pci_triggerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request the planning through the planner control interface node.\n"
"\n"
"# Set not_exe_path to true if don't want the robot to execute the path.\n"
"bool not_exe_path\n"
"# Set set_auto to true to change to auto mode and vice versa.\n"
"bool set_auto\n"
"uint8 bound_mode\n"
"\n"
"# Max velocity allowed.\n"
"float32 vel_max\n"
;
  }

  static const char* value(const ::planner_msgs::pci_triggerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.not_exe_path);
      stream.next(m.set_auto);
      stream.next(m.bound_mode);
      stream.next(m.vel_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pci_triggerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::pci_triggerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::pci_triggerRequest_<ContainerAllocator>& v)
  {
    s << indent << "not_exe_path: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.not_exe_path);
    s << indent << "set_auto: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set_auto);
    s << indent << "bound_mode: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.bound_mode);
    s << indent << "vel_max: ";
    Printer<float>::stream(s, indent + "  ", v.vel_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PCI_TRIGGERREQUEST_H

// Generated by gencpp from file planner_msgs/pci_homing_triggerRequest.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PCI_HOMING_TRIGGERREQUEST_H
#define PLANNER_MSGS_MESSAGE_PCI_HOMING_TRIGGERREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct pci_homing_triggerRequest_
{
  typedef pci_homing_triggerRequest_<ContainerAllocator> Type;

  pci_homing_triggerRequest_()
    : not_exe_path(false)  {
    }
  pci_homing_triggerRequest_(const ContainerAllocator& _alloc)
    : not_exe_path(false)  {
  (void)_alloc;
    }



   typedef uint8_t _not_exe_path_type;
  _not_exe_path_type not_exe_path;





  typedef boost::shared_ptr< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> const> ConstPtr;

}; // struct pci_homing_triggerRequest_

typedef ::planner_msgs::pci_homing_triggerRequest_<std::allocator<void> > pci_homing_triggerRequest;

typedef boost::shared_ptr< ::planner_msgs::pci_homing_triggerRequest > pci_homing_triggerRequestPtr;
typedef boost::shared_ptr< ::planner_msgs::pci_homing_triggerRequest const> pci_homing_triggerRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator2> & rhs)
{
  return lhs.not_exe_path == rhs.not_exe_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4fae9aecc7f1b253efbd8f8ea1e6d4b";
  }

  static const char* value(const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4fae9aecc7f1b25ULL;
  static const uint64_t static_value2 = 0x3efbd8f8ea1e6d4bULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/pci_homing_triggerRequest";
  }

  static const char* value(const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Request the planner control interface to guide the robot go home.\n"
"# Set true if don't want to execute path.\n"
"bool not_exe_path\n"
;
  }

  static const char* value(const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.not_exe_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pci_homing_triggerRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::pci_homing_triggerRequest_<ContainerAllocator>& v)
  {
    s << indent << "not_exe_path: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.not_exe_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PCI_HOMING_TRIGGERREQUEST_H

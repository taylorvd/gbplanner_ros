// Generated by gencpp from file planner_msgs/PlanningBound.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PLANNINGBOUND_H
#define PLANNER_MSGS_MESSAGE_PLANNINGBOUND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace planner_msgs
{
template <class ContainerAllocator>
struct PlanningBound_
{
  typedef PlanningBound_<ContainerAllocator> Type;

  PlanningBound_()
    : use_z_val(false)
    , min_val()
    , max_val()  {
    }
  PlanningBound_(const ContainerAllocator& _alloc)
    : use_z_val(false)
    , min_val(_alloc)
    , max_val(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _use_z_val_type;
  _use_z_val_type use_z_val;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _min_val_type;
  _min_val_type min_val;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _max_val_type;
  _max_val_type max_val;





  typedef boost::shared_ptr< ::planner_msgs::PlanningBound_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::PlanningBound_<ContainerAllocator> const> ConstPtr;

}; // struct PlanningBound_

typedef ::planner_msgs::PlanningBound_<std::allocator<void> > PlanningBound;

typedef boost::shared_ptr< ::planner_msgs::PlanningBound > PlanningBoundPtr;
typedef boost::shared_ptr< ::planner_msgs::PlanningBound const> PlanningBoundConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::PlanningBound_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::PlanningBound_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::PlanningBound_<ContainerAllocator1> & lhs, const ::planner_msgs::PlanningBound_<ContainerAllocator2> & rhs)
{
  return lhs.use_z_val == rhs.use_z_val &&
    lhs.min_val == rhs.min_val &&
    lhs.max_val == rhs.max_val;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::PlanningBound_<ContainerAllocator1> & lhs, const ::planner_msgs::PlanningBound_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::PlanningBound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::PlanningBound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::PlanningBound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::PlanningBound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::PlanningBound_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::PlanningBound_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::PlanningBound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9946f675c617611331fb20682325fff7";
  }

  static const char* value(const ::planner_msgs::PlanningBound_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9946f675c6176113ULL;
  static const uint64_t static_value2 = 0x31fb20682325fff7ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::PlanningBound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/PlanningBound";
  }

  static const char* value(const ::planner_msgs::PlanningBound_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::PlanningBound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# use_z_val\n"
"#    true:  all x, y, z coordinate\n"
"#    false: change only x, y coodinates\n"
"bool use_z_val\n"
"\n"
"# Bottom left corner\n"
"geometry_msgs/Point min_val\n"
"\n"
"# Top right corner\n"
"geometry_msgs/Point max_val\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::planner_msgs::PlanningBound_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::PlanningBound_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.use_z_val);
      stream.next(m.min_val);
      stream.next(m.max_val);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanningBound_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::PlanningBound_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::PlanningBound_<ContainerAllocator>& v)
  {
    s << indent << "use_z_val: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_z_val);
    s << indent << "min_val: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.min_val);
    s << indent << "max_val: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.max_val);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PLANNINGBOUND_H

// Generated by gencpp from file planner_msgs/PlannerStatus.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PLANNERSTATUS_H
#define PLANNER_MSGS_MESSAGE_PLANNERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <planner_msgs/TriggerMode.h>
#include <planner_msgs/BoundMode.h>
#include <planner_msgs/PlanningMode.h>
#include <planner_msgs/ExecutionPathMode.h>

namespace planner_msgs
{
template <class ContainerAllocator>
struct PlannerStatus_
{
  typedef PlannerStatus_<ContainerAllocator> Type;

  PlannerStatus_()
    : header()
    , success(false)
    , trigger_mode()
    , bound_mode()
    , planning_mode()
    , exe_path_mode()
    , max_vel(0.0)  {
    }
  PlannerStatus_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , success(false)
    , trigger_mode(_alloc)
    , bound_mode(_alloc)
    , planning_mode(_alloc)
    , exe_path_mode(_alloc)
    , max_vel(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _success_type;
  _success_type success;

   typedef  ::planner_msgs::TriggerMode_<ContainerAllocator>  _trigger_mode_type;
  _trigger_mode_type trigger_mode;

   typedef  ::planner_msgs::BoundMode_<ContainerAllocator>  _bound_mode_type;
  _bound_mode_type bound_mode;

   typedef  ::planner_msgs::PlanningMode_<ContainerAllocator>  _planning_mode_type;
  _planning_mode_type planning_mode;

   typedef  ::planner_msgs::ExecutionPathMode_<ContainerAllocator>  _exe_path_mode_type;
  _exe_path_mode_type exe_path_mode;

   typedef float _max_vel_type;
  _max_vel_type max_vel;





  typedef boost::shared_ptr< ::planner_msgs::PlannerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::PlannerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct PlannerStatus_

typedef ::planner_msgs::PlannerStatus_<std::allocator<void> > PlannerStatus;

typedef boost::shared_ptr< ::planner_msgs::PlannerStatus > PlannerStatusPtr;
typedef boost::shared_ptr< ::planner_msgs::PlannerStatus const> PlannerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::PlannerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::PlannerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::PlannerStatus_<ContainerAllocator1> & lhs, const ::planner_msgs::PlannerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.success == rhs.success &&
    lhs.trigger_mode == rhs.trigger_mode &&
    lhs.bound_mode == rhs.bound_mode &&
    lhs.planning_mode == rhs.planning_mode &&
    lhs.exe_path_mode == rhs.exe_path_mode &&
    lhs.max_vel == rhs.max_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::PlannerStatus_<ContainerAllocator1> & lhs, const ::planner_msgs::PlannerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::PlannerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::PlannerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::PlannerStatus_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "457dd68e31cf1be9ac36510d1cf7cba5";
  }

  static const char* value(const ::planner_msgs::PlannerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x457dd68e31cf1be9ULL;
  static const uint64_t static_value2 = 0xac36510d1cf7cba5ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/PlannerStatus";
  }

  static const char* value(const ::planner_msgs::PlannerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"bool success\n"
"planner_msgs/TriggerMode trigger_mode\n"
"planner_msgs/BoundMode bound_mode\n"
"planner_msgs/PlanningMode planning_mode\n"
"planner_msgs/ExecutionPathMode exe_path_mode\n"
"float32 max_vel\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: planner_msgs/TriggerMode\n"
"# Trigger mode of planner control interface, defined in PlannerTriggerModeType.\n"
"int32 kManual = 0\n"
"int32 kAuto = 1\n"
"\n"
"# Set one of above values.\n"
"int32 mode\n"
"================================================================================\n"
"MSG: planner_msgs/BoundMode\n"
"# Bound mode of the robot for collision checking, defined in Params/BoundModeType.\n"
"int32 kExtendedBound = 0\n"
"int32 kRelaxedBound = 1\n"
"int32 kMinBound = 2\n"
"int32 kExactBound = 3\n"
"int32 kNoBound = 4\n"
"\n"
"# Set one of above values.\n"
"int32 mode\n"
"================================================================================\n"
"MSG: planner_msgs/PlanningMode\n"
"# Planning mode for exploration, defined in Params/PlanningModeType.\n"
"int32 kBasicExploration = 0\n"
"int32 kNarrowEnvExploration = 1\n"
"int32 kAdaptiveExploration = 2\n"
"\n"
"# Set one of above values.\n"
"int32 mode\n"
"================================================================================\n"
"MSG: planner_msgs/ExecutionPathMode\n"
"# Execution path mode, defined in ExecutionPathType.\n"
"int32 kLocalPath = 0\n"
"int32 kHomingPath = 1\n"
"int32 kGlobalPath = 2\n"
"\n"
"# Set one of above values.\n"
"int32 mode\n"
"\n"
"# The path is in forward direction compared to current exploration direction or not\n"
"bool is_forward\n"
;
  }

  static const char* value(const ::planner_msgs::PlannerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.success);
      stream.next(m.trigger_mode);
      stream.next(m.bound_mode);
      stream.next(m.planning_mode);
      stream.next(m.exe_path_mode);
      stream.next(m.max_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::PlannerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::PlannerStatus_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "trigger_mode: ";
    s << std::endl;
    Printer< ::planner_msgs::TriggerMode_<ContainerAllocator> >::stream(s, indent + "  ", v.trigger_mode);
    s << indent << "bound_mode: ";
    s << std::endl;
    Printer< ::planner_msgs::BoundMode_<ContainerAllocator> >::stream(s, indent + "  ", v.bound_mode);
    s << indent << "planning_mode: ";
    s << std::endl;
    Printer< ::planner_msgs::PlanningMode_<ContainerAllocator> >::stream(s, indent + "  ", v.planning_mode);
    s << indent << "exe_path_mode: ";
    s << std::endl;
    Printer< ::planner_msgs::ExecutionPathMode_<ContainerAllocator> >::stream(s, indent + "  ", v.exe_path_mode);
    s << indent << "max_vel: ";
    Printer<float>::stream(s, indent + "  ", v.max_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PLANNERSTATUS_H

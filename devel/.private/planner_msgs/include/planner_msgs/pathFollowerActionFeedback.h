// Generated by gencpp from file planner_msgs/pathFollowerActionFeedback.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PATHFOLLOWERACTIONFEEDBACK_H
#define PLANNER_MSGS_MESSAGE_PATHFOLLOWERACTIONFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct pathFollowerActionFeedback_
{
  typedef pathFollowerActionFeedback_<ContainerAllocator> Type;

  pathFollowerActionFeedback_()
    : remaining_waypoints(0)
    , dist_to_goal(0.0)
    , estimated_time_remaining(0.0)  {
    }
  pathFollowerActionFeedback_(const ContainerAllocator& _alloc)
    : remaining_waypoints(0)
    , dist_to_goal(0.0)
    , estimated_time_remaining(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _remaining_waypoints_type;
  _remaining_waypoints_type remaining_waypoints;

   typedef float _dist_to_goal_type;
  _dist_to_goal_type dist_to_goal;

   typedef float _estimated_time_remaining_type;
  _estimated_time_remaining_type estimated_time_remaining;





  typedef boost::shared_ptr< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct pathFollowerActionFeedback_

typedef ::planner_msgs::pathFollowerActionFeedback_<std::allocator<void> > pathFollowerActionFeedback;

typedef boost::shared_ptr< ::planner_msgs::pathFollowerActionFeedback > pathFollowerActionFeedbackPtr;
typedef boost::shared_ptr< ::planner_msgs::pathFollowerActionFeedback const> pathFollowerActionFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator1> & lhs, const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.remaining_waypoints == rhs.remaining_waypoints &&
    lhs.dist_to_goal == rhs.dist_to_goal &&
    lhs.estimated_time_remaining == rhs.estimated_time_remaining;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator1> & lhs, const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "33050b047bebb42f5c1e671aa1431b25";
  }

  static const char* value(const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x33050b047bebb42fULL;
  static const uint64_t static_value2 = 0x5c1e671aa1431b25ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/pathFollowerActionFeedback";
  }

  static const char* value(const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# feedback\n"
"int32 remaining_waypoints\n"
"float32 dist_to_goal\n"
"float32 estimated_time_remaining\n"
;
  }

  static const char* value(const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.remaining_waypoints);
      stream.next(m.dist_to_goal);
      stream.next(m.estimated_time_remaining);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct pathFollowerActionFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::pathFollowerActionFeedback_<ContainerAllocator>& v)
  {
    s << indent << "remaining_waypoints: ";
    Printer<int32_t>::stream(s, indent + "  ", v.remaining_waypoints);
    s << indent << "dist_to_goal: ";
    Printer<float>::stream(s, indent + "  ", v.dist_to_goal);
    s << indent << "estimated_time_remaining: ";
    Printer<float>::stream(s, indent + "  ", v.estimated_time_remaining);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PATHFOLLOWERACTIONFEEDBACK_H

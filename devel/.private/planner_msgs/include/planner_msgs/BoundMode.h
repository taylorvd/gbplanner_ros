// Generated by gencpp from file planner_msgs/BoundMode.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_BOUNDMODE_H
#define PLANNER_MSGS_MESSAGE_BOUNDMODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace planner_msgs
{
template <class ContainerAllocator>
struct BoundMode_
{
  typedef BoundMode_<ContainerAllocator> Type;

  BoundMode_()
    : mode(0)  {
    }
  BoundMode_(const ContainerAllocator& _alloc)
    : mode(0)  {
  (void)_alloc;
    }



   typedef int32_t _mode_type;
  _mode_type mode;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(kExtendedBound)
  #undef kExtendedBound
#endif
#if defined(_WIN32) && defined(kRelaxedBound)
  #undef kRelaxedBound
#endif
#if defined(_WIN32) && defined(kMinBound)
  #undef kMinBound
#endif
#if defined(_WIN32) && defined(kExactBound)
  #undef kExactBound
#endif
#if defined(_WIN32) && defined(kNoBound)
  #undef kNoBound
#endif

  enum {
    kExtendedBound = 0,
    kRelaxedBound = 1,
    kMinBound = 2,
    kExactBound = 3,
    kNoBound = 4,
  };


  typedef boost::shared_ptr< ::planner_msgs::BoundMode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::BoundMode_<ContainerAllocator> const> ConstPtr;

}; // struct BoundMode_

typedef ::planner_msgs::BoundMode_<std::allocator<void> > BoundMode;

typedef boost::shared_ptr< ::planner_msgs::BoundMode > BoundModePtr;
typedef boost::shared_ptr< ::planner_msgs::BoundMode const> BoundModeConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::BoundMode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::BoundMode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::BoundMode_<ContainerAllocator1> & lhs, const ::planner_msgs::BoundMode_<ContainerAllocator2> & rhs)
{
  return lhs.mode == rhs.mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::BoundMode_<ContainerAllocator1> & lhs, const ::planner_msgs::BoundMode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::BoundMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::BoundMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::BoundMode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::BoundMode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::BoundMode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::BoundMode_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::BoundMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f460d6fbd196a4aff993d7d1dbede7d9";
  }

  static const char* value(const ::planner_msgs::BoundMode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf460d6fbd196a4afULL;
  static const uint64_t static_value2 = 0xf993d7d1dbede7d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::BoundMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/BoundMode";
  }

  static const char* value(const ::planner_msgs::BoundMode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::BoundMode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Bound mode of the robot for collision checking, defined in Params/BoundModeType.\n"
"int32 kExtendedBound = 0\n"
"int32 kRelaxedBound = 1\n"
"int32 kMinBound = 2\n"
"int32 kExactBound = 3\n"
"int32 kNoBound = 4\n"
"\n"
"# Set one of above values.\n"
"int32 mode\n"
;
  }

  static const char* value(const ::planner_msgs::BoundMode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::BoundMode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundMode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::BoundMode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::BoundMode_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_BOUNDMODE_H

// Generated by gencpp from file planner_msgs/planner_set_velRequest.msg
// DO NOT EDIT!


#ifndef PLANNER_MSGS_MESSAGE_PLANNER_SET_VELREQUEST_H
#define PLANNER_MSGS_MESSAGE_PLANNER_SET_VELREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Twist.h>

namespace planner_msgs
{
template <class ContainerAllocator>
struct planner_set_velRequest_
{
  typedef planner_set_velRequest_<ContainerAllocator> Type;

  planner_set_velRequest_()
    : root_vel()
    , set(false)  {
    }
  planner_set_velRequest_(const ContainerAllocator& _alloc)
    : root_vel(_alloc)
    , set(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Twist_<ContainerAllocator>  _root_vel_type;
  _root_vel_type root_vel;

   typedef uint8_t _set_type;
  _set_type set;





  typedef boost::shared_ptr< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> const> ConstPtr;

}; // struct planner_set_velRequest_

typedef ::planner_msgs::planner_set_velRequest_<std::allocator<void> > planner_set_velRequest;

typedef boost::shared_ptr< ::planner_msgs::planner_set_velRequest > planner_set_velRequestPtr;
typedef boost::shared_ptr< ::planner_msgs::planner_set_velRequest const> planner_set_velRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::planner_msgs::planner_set_velRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::planner_msgs::planner_set_velRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::planner_set_velRequest_<ContainerAllocator2> & rhs)
{
  return lhs.root_vel == rhs.root_vel &&
    lhs.set == rhs.set;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::planner_msgs::planner_set_velRequest_<ContainerAllocator1> & lhs, const ::planner_msgs::planner_set_velRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace planner_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "668284c624216ebac50e28208e8f15b7";
  }

  static const char* value(const ::planner_msgs::planner_set_velRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x668284c624216ebaULL;
  static const uint64_t static_value2 = 0xc50e28208e8f15b7ULL;
};

template<class ContainerAllocator>
struct DataType< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "planner_msgs/planner_set_velRequest";
  }

  static const char* value(const ::planner_msgs::planner_set_velRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Twist root_vel\n"
"bool set\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::planner_msgs::planner_set_velRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.root_vel);
      stream.next(m.set);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct planner_set_velRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::planner_msgs::planner_set_velRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::planner_msgs::planner_set_velRequest_<ContainerAllocator>& v)
  {
    s << indent << "root_vel: ";
    s << std::endl;
    Printer< ::geometry_msgs::Twist_<ContainerAllocator> >::stream(s, indent + "  ", v.root_vel);
    s << indent << "set: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.set);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLANNER_MSGS_MESSAGE_PLANNER_SET_VELREQUEST_H

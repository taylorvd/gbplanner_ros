# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_msgs/PlannerStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import planner_msgs.msg
import std_msgs.msg

class PlannerStatus(genpy.Message):
  _md5sum = "457dd68e31cf1be9ac36510d1cf7cba5"
  _type = "planner_msgs/PlannerStatus"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

bool success
planner_msgs/TriggerMode trigger_mode
planner_msgs/BoundMode bound_mode
planner_msgs/PlanningMode planning_mode
planner_msgs/ExecutionPathMode exe_path_mode
float32 max_vel
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: planner_msgs/TriggerMode
# Trigger mode of planner control interface, defined in PlannerTriggerModeType.
int32 kManual = 0
int32 kAuto = 1

# Set one of above values.
int32 mode
================================================================================
MSG: planner_msgs/BoundMode
# Bound mode of the robot for collision checking, defined in Params/BoundModeType.
int32 kExtendedBound = 0
int32 kRelaxedBound = 1
int32 kMinBound = 2
int32 kExactBound = 3
int32 kNoBound = 4

# Set one of above values.
int32 mode
================================================================================
MSG: planner_msgs/PlanningMode
# Planning mode for exploration, defined in Params/PlanningModeType.
int32 kBasicExploration = 0
int32 kNarrowEnvExploration = 1
int32 kAdaptiveExploration = 2

# Set one of above values.
int32 mode
================================================================================
MSG: planner_msgs/ExecutionPathMode
# Execution path mode, defined in ExecutionPathType.
int32 kLocalPath = 0
int32 kHomingPath = 1
int32 kGlobalPath = 2

# Set one of above values.
int32 mode

# The path is in forward direction compared to current exploration direction or not
bool is_forward"""
  __slots__ = ['header','success','trigger_mode','bound_mode','planning_mode','exe_path_mode','max_vel']
  _slot_types = ['std_msgs/Header','bool','planner_msgs/TriggerMode','planner_msgs/BoundMode','planner_msgs/PlanningMode','planner_msgs/ExecutionPathMode','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,success,trigger_mode,bound_mode,planning_mode,exe_path_mode,max_vel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlannerStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.success is None:
        self.success = False
      if self.trigger_mode is None:
        self.trigger_mode = planner_msgs.msg.TriggerMode()
      if self.bound_mode is None:
        self.bound_mode = planner_msgs.msg.BoundMode()
      if self.planning_mode is None:
        self.planning_mode = planner_msgs.msg.PlanningMode()
      if self.exe_path_mode is None:
        self.exe_path_mode = planner_msgs.msg.ExecutionPathMode()
      if self.max_vel is None:
        self.max_vel = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.success = False
      self.trigger_mode = planner_msgs.msg.TriggerMode()
      self.bound_mode = planner_msgs.msg.BoundMode()
      self.planning_mode = planner_msgs.msg.PlanningMode()
      self.exe_path_mode = planner_msgs.msg.ExecutionPathMode()
      self.max_vel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4iBf().pack(_x.success, _x.trigger_mode.mode, _x.bound_mode.mode, _x.planning_mode.mode, _x.exe_path_mode.mode, _x.exe_path_mode.is_forward, _x.max_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trigger_mode is None:
        self.trigger_mode = planner_msgs.msg.TriggerMode()
      if self.bound_mode is None:
        self.bound_mode = planner_msgs.msg.BoundMode()
      if self.planning_mode is None:
        self.planning_mode = planner_msgs.msg.PlanningMode()
      if self.exe_path_mode is None:
        self.exe_path_mode = planner_msgs.msg.ExecutionPathMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.success, _x.trigger_mode.mode, _x.bound_mode.mode, _x.planning_mode.mode, _x.exe_path_mode.mode, _x.exe_path_mode.is_forward, _x.max_vel,) = _get_struct_B4iBf().unpack(str[start:end])
      self.success = bool(self.success)
      self.exe_path_mode.is_forward = bool(self.exe_path_mode.is_forward)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_B4iBf().pack(_x.success, _x.trigger_mode.mode, _x.bound_mode.mode, _x.planning_mode.mode, _x.exe_path_mode.mode, _x.exe_path_mode.is_forward, _x.max_vel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.trigger_mode is None:
        self.trigger_mode = planner_msgs.msg.TriggerMode()
      if self.bound_mode is None:
        self.bound_mode = planner_msgs.msg.BoundMode()
      if self.planning_mode is None:
        self.planning_mode = planner_msgs.msg.PlanningMode()
      if self.exe_path_mode is None:
        self.exe_path_mode = planner_msgs.msg.ExecutionPathMode()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 22
      (_x.success, _x.trigger_mode.mode, _x.bound_mode.mode, _x.planning_mode.mode, _x.exe_path_mode.mode, _x.exe_path_mode.is_forward, _x.max_vel,) = _get_struct_B4iBf().unpack(str[start:end])
      self.success = bool(self.success)
      self.exe_path_mode.is_forward = bool(self.exe_path_mode.is_forward)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B4iBf = None
def _get_struct_B4iBf():
    global _struct_B4iBf
    if _struct_B4iBf is None:
        _struct_B4iBf = struct.Struct("<B4iBf")
    return _struct_B4iBf

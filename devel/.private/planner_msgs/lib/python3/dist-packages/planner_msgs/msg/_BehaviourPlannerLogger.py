# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_msgs/BehaviourPlannerLogger.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class BehaviourPlannerLogger(genpy.Message):
  _md5sum = "c3c9c34a8a3952fd0863b37239f93bdd"
  _type = "planner_msgs/BehaviourPlannerLogger"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

float32 total_time
bool planner
float32 current_seen_ratio 
float32 exploration_cost
float32 coverage_cost 
float32 room_belief
float32 tunnel_belief
float32 perf_exp
float32 perf_cov
float32 delta_seen_surf
float32 delta_seen_vol

#Hypergame log
float32[] image_brightness_utility
float32[] utility_sparse
float32[] utility_dense
float32[] utility_corridor
float32[] final_scores
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','total_time','planner','current_seen_ratio','exploration_cost','coverage_cost','room_belief','tunnel_belief','perf_exp','perf_cov','delta_seen_surf','delta_seen_vol','image_brightness_utility','utility_sparse','utility_dense','utility_corridor','final_scores']
  _slot_types = ['std_msgs/Header','float32','bool','float32','float32','float32','float32','float32','float32','float32','float32','float32','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,total_time,planner,current_seen_ratio,exploration_cost,coverage_cost,room_belief,tunnel_belief,perf_exp,perf_cov,delta_seen_surf,delta_seen_vol,image_brightness_utility,utility_sparse,utility_dense,utility_corridor,final_scores

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BehaviourPlannerLogger, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.total_time is None:
        self.total_time = 0.
      if self.planner is None:
        self.planner = False
      if self.current_seen_ratio is None:
        self.current_seen_ratio = 0.
      if self.exploration_cost is None:
        self.exploration_cost = 0.
      if self.coverage_cost is None:
        self.coverage_cost = 0.
      if self.room_belief is None:
        self.room_belief = 0.
      if self.tunnel_belief is None:
        self.tunnel_belief = 0.
      if self.perf_exp is None:
        self.perf_exp = 0.
      if self.perf_cov is None:
        self.perf_cov = 0.
      if self.delta_seen_surf is None:
        self.delta_seen_surf = 0.
      if self.delta_seen_vol is None:
        self.delta_seen_vol = 0.
      if self.image_brightness_utility is None:
        self.image_brightness_utility = []
      if self.utility_sparse is None:
        self.utility_sparse = []
      if self.utility_dense is None:
        self.utility_dense = []
      if self.utility_corridor is None:
        self.utility_corridor = []
      if self.final_scores is None:
        self.final_scores = []
    else:
      self.header = std_msgs.msg.Header()
      self.total_time = 0.
      self.planner = False
      self.current_seen_ratio = 0.
      self.exploration_cost = 0.
      self.coverage_cost = 0.
      self.room_belief = 0.
      self.tunnel_belief = 0.
      self.perf_exp = 0.
      self.perf_cov = 0.
      self.delta_seen_surf = 0.
      self.delta_seen_vol = 0.
      self.image_brightness_utility = []
      self.utility_sparse = []
      self.utility_dense = []
      self.utility_corridor = []
      self.final_scores = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fB9f().pack(_x.total_time, _x.planner, _x.current_seen_ratio, _x.exploration_cost, _x.coverage_cost, _x.room_belief, _x.tunnel_belief, _x.perf_exp, _x.perf_cov, _x.delta_seen_surf, _x.delta_seen_vol))
      length = len(self.image_brightness_utility)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.image_brightness_utility))
      length = len(self.utility_sparse)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.utility_sparse))
      length = len(self.utility_dense)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.utility_dense))
      length = len(self.utility_corridor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.utility_corridor))
      length = len(self.final_scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.final_scores))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.total_time, _x.planner, _x.current_seen_ratio, _x.exploration_cost, _x.coverage_cost, _x.room_belief, _x.tunnel_belief, _x.perf_exp, _x.perf_cov, _x.delta_seen_surf, _x.delta_seen_vol,) = _get_struct_fB9f().unpack(str[start:end])
      self.planner = bool(self.planner)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.image_brightness_utility = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.utility_sparse = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.utility_dense = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.utility_corridor = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.final_scores = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_fB9f().pack(_x.total_time, _x.planner, _x.current_seen_ratio, _x.exploration_cost, _x.coverage_cost, _x.room_belief, _x.tunnel_belief, _x.perf_exp, _x.perf_cov, _x.delta_seen_surf, _x.delta_seen_vol))
      length = len(self.image_brightness_utility)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.image_brightness_utility.tostring())
      length = len(self.utility_sparse)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.utility_sparse.tostring())
      length = len(self.utility_dense)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.utility_dense.tostring())
      length = len(self.utility_corridor)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.utility_corridor.tostring())
      length = len(self.final_scores)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.final_scores.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.total_time, _x.planner, _x.current_seen_ratio, _x.exploration_cost, _x.coverage_cost, _x.room_belief, _x.tunnel_belief, _x.perf_exp, _x.perf_cov, _x.delta_seen_surf, _x.delta_seen_vol,) = _get_struct_fB9f().unpack(str[start:end])
      self.planner = bool(self.planner)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.image_brightness_utility = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.utility_sparse = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.utility_dense = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.utility_corridor = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.final_scores = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_fB9f = None
def _get_struct_fB9f():
    global _struct_fB9f
    if _struct_fB9f is None:
        _struct_fB9f = struct.Struct("<fB9f")
    return _struct_fB9f

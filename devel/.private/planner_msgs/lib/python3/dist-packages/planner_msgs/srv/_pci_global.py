# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_msgs/pci_globalRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pci_globalRequest(genpy.Message):
  _md5sum = "5b7aecbe90c397a53b27664f48377146"
  _type = "planner_msgs/pci_globalRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Request the planning through the planner control interface node.

## Params for planner-control-interface
# Set not_exe_path to true if don't want the robot to execute the path.
bool not_exe_path
# Set set_auto to true to change to auto mode and vice versa.
bool set_auto
uint8 bound_mode
# Max velocity allowed.
float32 vel_max

## Params for planner
# id of the frontier:
# --> default is 0: auto-select the best frontier.
# --> other than 0: manual select with feasibility check.
int32 id
# Don't check for frontier properties (e.g. leaf vertex, gain, ...).
# This could be used to find a path to any vertex in the graph.
bool not_check_frontier
# Force the planner to provide the path regardless the time budget.
bool ignore_time
"""
  __slots__ = ['not_exe_path','set_auto','bound_mode','vel_max','id','not_check_frontier','ignore_time']
  _slot_types = ['bool','bool','uint8','float32','int32','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       not_exe_path,set_auto,bound_mode,vel_max,id,not_check_frontier,ignore_time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pci_globalRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.not_exe_path is None:
        self.not_exe_path = False
      if self.set_auto is None:
        self.set_auto = False
      if self.bound_mode is None:
        self.bound_mode = 0
      if self.vel_max is None:
        self.vel_max = 0.
      if self.id is None:
        self.id = 0
      if self.not_check_frontier is None:
        self.not_check_frontier = False
      if self.ignore_time is None:
        self.ignore_time = False
    else:
      self.not_exe_path = False
      self.set_auto = False
      self.bound_mode = 0
      self.vel_max = 0.
      self.id = 0
      self.not_check_frontier = False
      self.ignore_time = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3Bfi2B().pack(_x.not_exe_path, _x.set_auto, _x.bound_mode, _x.vel_max, _x.id, _x.not_check_frontier, _x.ignore_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.not_exe_path, _x.set_auto, _x.bound_mode, _x.vel_max, _x.id, _x.not_check_frontier, _x.ignore_time,) = _get_struct_3Bfi2B().unpack(str[start:end])
      self.not_exe_path = bool(self.not_exe_path)
      self.set_auto = bool(self.set_auto)
      self.not_check_frontier = bool(self.not_check_frontier)
      self.ignore_time = bool(self.ignore_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3Bfi2B().pack(_x.not_exe_path, _x.set_auto, _x.bound_mode, _x.vel_max, _x.id, _x.not_check_frontier, _x.ignore_time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.not_exe_path, _x.set_auto, _x.bound_mode, _x.vel_max, _x.id, _x.not_check_frontier, _x.ignore_time,) = _get_struct_3Bfi2B().unpack(str[start:end])
      self.not_exe_path = bool(self.not_exe_path)
      self.set_auto = bool(self.set_auto)
      self.not_check_frontier = bool(self.not_check_frontier)
      self.ignore_time = bool(self.ignore_time)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3Bfi2B = None
def _get_struct_3Bfi2B():
    global _struct_3Bfi2B
    if _struct_3Bfi2B is None:
        _struct_3Bfi2B = struct.Struct("<3Bfi2B")
    return _struct_3Bfi2B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from planner_msgs/pci_globalResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class pci_globalResponse(genpy.Message):
  _md5sum = "358e233cde0c8a8bcfea4ce193f8fc15"
  _type = "planner_msgs/pci_globalResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
"""
  __slots__ = ['success']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(pci_globalResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
    else:
      self.success = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class pci_global(object):
  _type          = 'planner_msgs/pci_global'
  _md5sum = 'b813db86654aa005e1e7d2d2ea812561'
  _request_class  = pci_globalRequest
  _response_class = pci_globalResponse
